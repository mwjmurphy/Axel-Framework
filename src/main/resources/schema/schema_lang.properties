foreign_entity.description=This is required when populating entity (pojo) beans for an Object Relationship Model (ORM).\n\
\n\
Its purpose is to name the property in a class that will store the object/s in the table ORM \
relationship.  This is a requirement when using ORM persistence tools such as Hibernate, \
Toplink, Eclipselink.  When persisting the Model, the object tree must know the relationship \
between the class objects which represent the table relationships.\n\
\n\
A class may require more than one foreign_entity entries if it has multiple OneToMany relationships. \
Which would apply to a Primary Key that is referenced from multiple tables/classes in different \
relationships.\n\
\n\
As an example\n\
\n\
We have a Project table named <b>tb_project</b> which has a primary key named <b>tb_projectid</b> and \
a Rights table named <b>tb_rights</b> which has a primary key named <b>tb_rightsid</b>.\n\
\n\
A Project can have many Rights but a Right can have only one Project.\n\
\n\
The Project object has a property named <b>tbRights</b> which contains a list of the rights \
assigned to this project in a OneToMany relationship.\n\
\n\
The Rights object has a property named <b>tbProject</b> which contains the Project \
that this right belongs to in a ManyToOne relationship.\n\
\n\
<pre><code>\
\n\n\
@Entity\n\n\
@Table(name = "tb_project")\n\n\
public class TbProject {\n\n\
...\n\n\
&nbsp;&nbsp;&nbsp;// tb_project can have multiple tb_rights\n\n\
&nbsp;&nbsp;&nbsp;@OneToMany(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER, targetEntity = TbRights.class)\n\n\
&nbsp;&nbsp;&nbsp;@JoinColumn(name = "tb_projectid")\n\n\
&nbsp;&nbsp;&nbsp;private List<TbRights> <b>tbRights</b> = new ArrayList<TbRights>();\n\n\
...\n\n\
}\n\n\
</code></pre>\
\n\
<pre><code>\
\n\n\
@Entity\n\n\
@Table(name = "tb_rights")\n\n\
public class TbRights {\n\n\
...\n\n\
&nbsp;&nbsp;&nbsp;// tb_rights has one tb_project\n\n\
&nbsp;&nbsp;&nbsp;@ManyToOne()\n\n\
&nbsp;&nbsp;&nbsp;@JoinColumn(name = "tb_projectid", nullable = false)\n\n\
&nbsp;&nbsp;&nbsp;private TbProject <b>tbProject</b>;\n\n\
...\n\n\
}\n\n\
</code></pre>

foreign_entity.name.description=\
This is the bean property name for the referencing table or tables.\
\
It matches the property name in the class.\
\
Example\
\
<code>\
@Column(name="permission")\
private String <b>permission</b>;\
</code>\
\
And looks like\
\
<pre>&lt;foreign_entity name="<b>permission</b>"/&gt;</pre>\
\
All properties <b>must</b> have setter and getter methods that conform with java standards.\
\
An example of setter and getter for <b>permission</b>\
<code>\
public String getPermission() {\
    return this.permission;\
}\
public void setPermission(String permission) {\
    this.permission = permission;\
}\
</code>

foreign_entity.table.description=\
This is the name of the table that this foreign_entity links to and is only required \
when using a primary key to reference a list of tables.\
\
As an example\
\
<pre>&lt;foreign_entity name="tbRights" table="tb_rights/&gt;</pre>\
\
tbRights is <code>List tbRights;</code>\
\
tb_rights is the table bean that it expects to contain in the list tbRights.\
\
Should be written in code as <code>List<TbRights> tbRights;</code>
